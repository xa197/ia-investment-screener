# pages/8_üìä_Suivi_des_Pr√©dictions.py

import streamlit as st
import pandas as pd
import yfinance as yf
from datetime import datetime, timedelta

st.set_page_config(page_title="Suivi des Pr√©dictions", layout="wide")
st.title("üìä Suivi de la Fiabilit√© des Pr√©dictions IA")

LOG_FILE = 'predictions_log.csv'

@st.cache_data(ttl=3600) # On met en cache pendant 1h
def get_price_on_date(ticker, date):
    """R√©cup√®re le prix de cl√¥ture √† une date pr√©cise."""
    try:
        data = yf.Ticker(ticker).history(start=date, end=pd.to_datetime(date) + timedelta(days=2))
        return data['Close'].iloc[0] if not data.empty else None
    except:
        return None

def update_prediction_results(df):
    """
    Parcourt le log, v√©rifie les pr√©dictions √©chues, et calcule les r√©sultats.
    """
    df_updated = df.copy()
    today = datetime.now().date()
    
    # On ne met √† jour que les lignes "En cours"
    for index, row in df_updated[df_updated['Statut'] == 'En cours'].iterrows():
        prediction_date = pd.to_datetime(row['DatePrediction']).date()
        due_date = prediction_date + timedelta(days=row['HorizonJours'])
        
        # Si la date d'√©ch√©ance est pass√©e
        if today >= due_date:
            # On r√©cup√®re le prix r√©el √† la date d'√©ch√©ance
            actual_price = get_price_on_date(row['Ticker'], due_date)
            
            if actual_price is not None:
                df_updated.loc[index, 'PrixReelEcheance'] = actual_price
                # On calcule le % de changement r√©el
                real_change_pct = ((actual_price - row['PrixInitial']) / row['PrixInitial']) * 100
                df_updated.loc[index, 'ResultatReelPct'] = real_change_pct
                df_updated.loc[index, 'Statut'] = 'Termin√©'
            else:
                df_updated.loc[index, 'Statut'] = 'Erreur Prix' # On n'a pas pu r√©cup√©rer le prix
                
    # On sauvegarde les mises √† jour dans le fichier
    df_updated.to_csv(LOG_FILE, index=False)
    return df_updated

# --- INTERFACE ---
try:
    log_df = pd.read_csv(LOG_FILE)
    
    if st.button("üîÑ Mettre √† jour les r√©sultats des pr√©dictions √©chues"):
        log_df = update_prediction_results(log_df)
        st.success("R√©sultats mis √† jour !")

    if log_df.empty:
        st.info("Aucune pr√©diction n'a encore √©t√© enregistr√©e.")
    else:
        # --- STATISTIQUES GLOBALES ---
        st.header("Statistiques de Fiabilit√©")
        df_completed = log_df[log_df['Statut'] == 'Termin√©'].copy()
        
        if df_completed.empty:
            st.write("Aucune pr√©diction n'est encore arriv√©e √† √©ch√©ance.")
        else:
            # Le mod√®le a-t-il pr√©dit la bonne direction (hausse/baisse) ?
            df_completed['BonneDirection'] = (df_completed['PotentielPredit'] * df_completed['ResultatReelPct']) > 0
            accuracy = df_completed['BonneDirection'].mean() * 100
            
            # √âcart moyen entre la pr√©diction et la r√©alit√©
            df_completed['Ecart'] = (df_completed['PotentielPredit'] - df_completed['ResultatReelPct']).abs()
            mae = df_completed['Ecart'].mean()
            
            col1, col2 = st.columns(2)
            col1.metric("Pr√©cision Directionnelle", f"{accuracy:.2f}%")
            col2.metric("Erreur Moyenne Absolue (MAE)", f"{mae:.2f}%")

        # --- AFFICHAGE DU JOURNAL ---
        st.header("Journal de Bord des Pr√©dictions")
        
        st.subheader("‚è≥ Pr√©dictions en Cours")
        st.dataframe(log_df[log_df['Statut'] == 'En cours'])
        
        st.subheader("‚úÖ Pr√©dictions Termin√©es")
        st.dataframe(log_df[log_df['Statut'] == 'Termin√©'].style.format({
            'PrixInitial': '${:,.2f}', 'PrixPredit': '${:,.2f}', 'PotentielPredit': '{:.2f}%',
            'PrixReelEcheance': '${:,.2f}', 'ResultatReelPct': '{:.2f}%'
        }))
        
except (FileNotFoundError, pd.errors.EmptyDataError):
    st.info("Le journal des pr√©dictions est vide. Lancez une analyse depuis le 'Moteur de D√©couverte' et enregistrez les r√©sultats.")